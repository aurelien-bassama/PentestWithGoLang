
package main

import (
	"fmt"
	// "reflect"
)

// var (
// 	APP_NAME = "vars"
// 	VERSION = "1.0.0"
// 	AUTHOR = "foo"
// )

// const (
// 	APP_NAME = "vars"
// 	VERSION = "1.0.0"
// 	AUTHOR = "foo"
// )

// const APP_NAME, VERSION, AUTHOR string = "vars", "1.0.0", "foo"


func main() {
	// var strVar string;
	// strVar = "first string!"
	////////////////////
	// var str1,str2,str3 string;
	// str1 = "str1"
	// str2 = "str2"
	// str3 = "str3"
	// fmt.Println("Multiple define variables:", str1, str2, str3)
	/////////////////////
	// str1, str2, str3 = "str1", "str2", "str3"
	////////////////////
	// str1, str2, str3 := "str1", "str2", "str3"
	// fmt.Println("Multiple define variables:", str1, str2, str3)
	// str1 = "STR1"
	// fmt.Println("Multiple define variables:", str1, str2, str3)
	////////////////////
	// const constStrVar string = "CONST Variable"
	// fmt.Println(constStrVar)
	// constStrVar = "Change!"
	// fmt.Println(constStrVar)
	////////////////////
	// fmt.Println(APP_NAME, VERSION, AUTHOR)
	////////////////////
	/*
		UPPER_CASE1, lower_case2
		_underline,
		!package, if, else, etc.
		firstVarName
		FirstVarName
		!3varName => varName3
	*/
	/////////////////
	// Bool
	// optVar := 1 == 2
	// boolVar := true != false
	// fmt.Println(optVar, boolVar)
	// Int
	// var int32Var int = -202
	// var uint32Var uint = -202
	// var float32Var float32 = 202.202
	// fmt.Println(int32Var, uint32Var, float32Var)
	// Rune
	// var int32RuneVar int = 'a'
	// fmt.Println(string(int32RuneVar))
	// Convert Ascii-Code to Chr
	// chr := rune(97)
	// Convert Chr to Ascii-Code
	// ord := int(chr)

	// fmt.Printf("CHR: %c\nORD: %d\n", chr, ord)
	// String
	// str := "string"
	// Multiline string
	// mStr := `foo
	// ba
	// bar
	// foo1
	// `
	// fmt.Println(str)
	// fmt.Println(mStr)
	/*
		strings => to process strings
		strconv => to convert strings
	*/
	// arrays
	// var arrVar [3]string;
	// var arrVar [3]string = [3]string{"First cell", "Second cell", "Third cell"}
	// arrVar := [3]string{"First cell", "Second cell", "Third cell"}
	// arrVar[0] = "First cell"
	// arrVar[1] = "Second cell"
	// arrVar[2] = "Third cell"
	// fmt.Println(arrVar)
	// fmt.Println(arrVar[1])
	// Multi-dimentional arrays
	// var mArrVar [2][2]string
	// mArrVar[0] = [2]string{"A", "B"}
	// mArrVar[1] = [2]string{"C", "D"}
	// fmt.Println(mArrVar)
	// var mArrVar [2][2][1]string
	// mArrVar[0] = [2][1]string{[1]string{"AAA"}}
	// mArrVar[1] = [2][1]string{[1]string{"BBB"}}
	// // fmt.Println(mArrVar)
	// fmt.Println(mArrVar[0][0][0])
	// fmt.Println(mArrVar[1][0][0])
	// mArrVar[1][0][0] = "BBBC"
	// fmt.Println(mArrVar[1][0][0])
	// array := make([]int, 10)
	// fmt.Println(array)
	// Slices
	// var sliceVar []string = []string{"First cell", "Second cell", "Third cell"}
	// sliceVar = append(sliceVar, "f cell", "r cell", "x cell", "Last cell")
	// fmt.Println(sliceVar)
	// fmt.Println(sliceVar[:len(sliceVar)-1])
	// Maps
	// mapVar := make(map[string]string)
	// mapVar["John"] = "Doe"
	// var mapVar map[string]string = map[string]string{"John": "Doe", "Foo": "Bar"}
	// mapVar["x"] = "y"
	// fmt.Println(mapVar)
	///////////////////////////
	// Str := "a"
	// Int := 1
	// Float := 1.1
	// fmt.Println(reflect.TypeOf(Str))
	// fmt.Println(reflect.TypeOf(Int))
	// fmt.Println(reflect.TypeOf(Float))
	// Type := fmt.Sprintf("%T", Str)
	// fmt.Println(Type)
	//////////////////////////
	// fmt.Println(len("aaaaaaaaaa"))
	/////////////////////////
	// slice1 := []int{1,2,3}
	// slice2 := []int{4,5,6}
	// copy(slice2, slice1)
	// slice1[0] = 9
	// slice2[0] = 9
	// fmt.Println(slice2)
	//////////////////////////


}